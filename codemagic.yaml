definitions:

  environment:
    app_details:
      vars:
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        SPLASH: $SPLASH
        LOGO_URL: $LOGO_URL
        WEB_URL: $WEB_URL
        url: $WEB_URL
        firebase_config_android: $firebase_config_android
        PKG_NAME: $PKG_NAME
        EMAIL_ID: $EMAIL_ID
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_SMS: $IS_SMS
        IS_PHONE: $IS_PHONE
        IS_BLUETOOTH: $IS_BLUETOOTH

  artifacts:
    #- &ipa_file build/ios/ipa/*.ipa
    #- &xcode_log /tmp/xcodebuild_logs/*.log
    #- &dsym $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    # - &app $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
    #    - &android_abb build/**/outputs/**/*.aab
    - &android_apk build/**/outputs/**/*.apk
    #- &android_mapping_txt build/**/outputs/**/mapping.txt
    #3- &flutter_drive_log flutter_drive.log

  email_release: &email_release
    email:
      recipients:
        - $EMAIL_ID
        # - thamaraikannan137@gmail.com
      notify:
        success: true
        failure: true

  scripts:
    - &pub_get
      name: Get packages
      script: |
        flutter pub get

    - &debug_env
      name: Debug Environment Variables
      script: |
        echo "APP_NAME: $APP_NAME"
        echo "ORG_NAME: $ORG_NAME"
        echo "WEB_URL: $WEB_URL"
        echo "SPLASH: $SPLASH"
        echo "firebase_config_android: $firebase_config_android"
        echo "PKG_NAME: $PKG_NAME"
        echo "EMAIL_ID: $EMAIL_ID"
        echo "PUSH_NOTIFY: $PUSH_NOTIFY"
         echo "IS_CAMERA: $IS_CAMERA"
          echo "IS_LOCATION: $IS_LOCATION"
          echo "IS_MIC: $IS_MIC"
          echo "IS_NOTIFICATION: $IS_NOTIFICATION"
          echo "IS_CONTACT: $IS_CONTACT"
          echo "IS_SMS: $IS_SMS"
          echo "IS_PHONE: $IS_PHONE"
          echo "IS_BLUETOOTH: $IS_BLUETOOTH"
        REQUIRED_VARS=("APP_NAME" "ORG_NAME" "WEB_URL" "EMAIL_ID")
        for var in "${REQUIRED_VARS[@]}"; do
        if [ -z "${!var}" ]; then
        echo "‚ùå $var is not set"
        exit 1
        fi
        done
        echo "‚úÖ All required vars are present"

    - &Inject_Firebase
        name: Inject Firebase and buildscript block
        script: |
          if [ "$PUSH_NOTIFY" = "true" ]; then
          echo "üì¶ Enabling Firebase integration..."

          if ! grep -q "com.google.gms:google-services" android/build.gradle; then
            echo "‚úÖ Injecting Firebase classpath into android/build.gradle..."

            if ! grep -q "buildscript {" android/build.gradle; then
              sed -i '1s;^;buildscript {\n  repositories {\n    google()\n    mavenCentral()\n  }\n  dependencies {\n    classpath "com.google.gms:google-services:4.3.15"\n  }\n}\n\n;' android/build.gradle
              echo "‚úÖ Full buildscript block injected"
            else
              sed -i '/buildscript {/,/}/ s/dependencies {/dependencies {\n    classpath "com.google.gms:google-services:4.3.15"/' android/build.gradle
              echo "‚úÖ Firebase classpath inserted"
            fi
          fi
          else
          echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
          fi

    - &patch_android_build_config
        name: Patch Android build config (NDK & desugaring)
        script: |
          echo "üîß Patching build.gradle for NDK and desugaring support..."
          
          # Inject ndkVersion
          if grep -q "ndkVersion" android/app/build.gradle; then
            echo "‚úÖ NDK version already specified"
          else
            sed -i '/android {/a \    ndkVersion "27.0.12077973"' android/app/build.gradle
            echo "‚úÖ Added ndkVersion"
          fi
          
          # Enable coreLibraryDesugaring
          if grep -q "coreLibraryDesugaringEnabled true" android/app/build.gradle; then
            echo "‚úÖ Desugaring already enabled"
          else
            sed -i '/compileOptions {/a \        coreLibraryDesugaringEnabled true' android/app/build.gradle
            echo "‚úÖ Enabled desugaring"
          fi
          
          # Add desugaring dependency
          if grep -q "desugar_jdk_libs" android/app/build.gradle; then
            echo "‚úÖ Desugar lib already in dependencies"
          else
            sed -i '/dependencies {/a \    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.0.4"' android/app/build.gradle
            echo "‚úÖ Added desugar_jdk_libs dependency"
          fi

    - &get_json
        name: Get JSON file
        script: |
          if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üì• Downloading google-services.json..."
            wget -O android/app/google-services.json "$firebase_config_android"
            wget -O assets/google-services.json "$firebase_config_android"
          else
            echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
          fi

    - &update_sdkver
        name: Updating SDK version
        script: |
          if [ "$PUSH_NOTIFY" = "true" ]; then
            echo "üîß Updating minSdkVersion and targetSdkVersion..."
            sed -i.bak 's/minSdk\s*=\s*.*$/minSdk 21/' android/app/build.gradle
            sed -i.bak 's/targetSdk\s*=\s*.*$/targetSdk 34/' android/app/build.gradle
            echo "‚úÖ SDK versions updated"
          else
            echo "üö´ Firebase config skipped (PUSH_NOTIFY is not true)"
          fi

    - &build_app
        name: Building App with Feature Flags
        script: |
          echo "‚úÖ Start Building APK..."
          flutter clean
          flutter pub get
          flutter build apk --release \
            --dart-define=WEB_URL="$WEB_URL" \
            --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY" \
            --dart-define=IS_CAMERA="$IS_CAMERA" \
            --dart-define=IS_LOCATION="$IS_LOCATION" \
            --dart-define=IS_MIC="$IS_MIC" \
            --dart-define=IS_NOTIFICATION="$IS_NOTIFICATION" \
            --dart-define=IS_CONTACT="$IS_CONTACT" \
            --dart-define=IS_SMS="$IS_SMS" \
            --dart-define=IS_PHONE="$IS_PHONE" \
            --dart-define=IS_BLUETOOTH="$IS_BLUETOOTH" \
            > flutter_build.log
          echo "‚úÖ Build APK Completed"
          fi

    - &get_logo
      name: Get logo image from logoUrl
      script: |
        mkdir -p assets/images/
        wget -O assets/images/logo.png $LOGO_URL
        flutter pub get

    - &get_splash
      name: Get splash screen image from splash image from Url
      script: |
        mkdir -p assets/images/
        wget -O assets/images/splash.png $SPLASH
        flutter pub get

    - &set_launcher_icons
      name: Generate Launcher Icons
      script: |
        flutter pub run flutter_launcher_icons:main
        flutter pub get
    - &set_splash_icons
      name: Add splash screen to build
      script: |
        flutter pub run flutter_native_splash:create
        flutter pub get


    - &change_app_name
      name: Change app name
      script: |
        flutter pub run rename setAppName --value "$APP_NAME"
        flutter pub get
    #
    #    - &build_abb
    #      name: Build ABB
    #      script: |
    #        flutter build appbundle --release --dart-define=WEB_URL=$WEB_URL

    

    - &build_debug_apk
      name: Build APK
      script: |
        flutter clean
        flutter pub get
        flutter build apk --debug --dart-define=WEB_URL="$WEB_URL" --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"


    - &build_release_apk
      name: Build APK
      script: |
        flutter clean
        flutter pub get
        flutter build apk --release --dart-define=WEB_URL="$WEB_URL" --dart-define=PUSH_NOTIFY="$PUSH_NOTIFY"


    - &update_android_package
      name: Update Android Package Name
      script: |
        echo "Updating Android package name..."

        # Convert ORG_NAME and APP_NAME to lowercase and remove spaces/underscores
        CLEANED_ORG_NAME=$(echo "$ORG_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')
        CLEANED_APP_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -d ' _')

        # Construct valid package name
        # PACKAGE_NAME="com.${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        # Prefer PKG_NAME if available
        if [ -n "$PKG_NAME" ]; then
        PACKAGE_NAME="$PKG_NAME"
        else
          PACKAGE_NAME="${CLEANED_ORG_NAME}.${CLEANED_APP_NAME}"
        fi

        # Validate package name format
        if [[ ! "$PACKAGE_NAME" =~ ^[a-zA-Z_][a-zA-Z0-9]*(\.[a-zA-Z_][a-zA-Z0-9]*)+$ ]]; then
          echo "‚ùå ERROR: Invalid package name: $PACKAGE_NAME"
          exit 1
        fi

        echo "‚úî Package name: $PACKAGE_NAME"

        flutter pub run rename setBundleId  --value "$PACKAGE_NAME"

        # Update AndroidManifest.xml
        sed -i '' "s/package=\"[^\"]*\"/package=\"$PACKAGE_NAME\"/g" android/app/src/main/AndroidManifest.xml

        # Update applicationId in build.gradle
        sed -i '' "s/applicationId \"[^\"]*\"/applicationId \"$PACKAGE_NAME\"/g" android/app/build.gradle

        echo "‚úî Package name updated to: $PACKAGE_NAME"



workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 65
    instance_type: mac_mini_m1
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *patch_android_build_config
      - *update_android_package
      - *Inject_Firebase
      - *get_json
      - *update_sdkver
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *set_splash_icons
      - *change_app_name
      - *build_app
      # - *build_release_apk
      # - *build_abb
      # - *build_debug_apk
    artifacts:
      - *android_apk
      - flutter_build.log
      - fcm_token.txt
    #        - *android_abb
    publishing: *email_release
  android-release-workflow:
    name: Android release Workflow
    max_build_duration: 65
    instance_type: mac_mini_m2
    environment:
      flutter: stable
    scripts:
      - *pub_get
      - *debug_env
      - *update_android_package  
      - *get_logo
      - *set_launcher_icons
      - *get_splash
      - *set_splash_icons
      - *change_app_name
      - *Inject_Firebase
      # - *build_release_apk
    # - *build_abb
#     - *build_debug_apk
    artifacts:
      - *android_apk
    #        - *android_abb
    publishing: *email_release
